package fusions;

import classesPeintureCelebre.ToileDePeintureCelebre;
import classesSuperHero.SuperHero;
import fusion.MissionSuperHero;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

//g√®re la mission de protection et de r√©cup√©ration d‚Äôune ≈ìuvre d‚Äôart par un super-h√©ros.
public class MissionSuperHeroTest {
    private MissionSuperHero mission;
    private SuperHero batman;
    private ToileDePeintureCelebre monaLisa;

    @BeforeEach
    void setUp() {
        batman = new SuperHero("Batman", 100);
        monaLisa = new ToileDePeintureCelebre("La Joconde", "L√©onard de Vinci", 1503, "Myst√©rieux sourire");
        mission = new MissionSuperHero(batman, monaLisa);
    }

    //V√©rifie qu‚Äôune mission n‚Äôest pas accomplie √† la cr√©ation.
    @Test
    void testMissionNonAccomplieInitialement() {
        assertFalse(mission.isMissionReussie(), "La mission ne devrait pas √™tre accomplie au d√©part.");
    }

    //V√©rifie que la mission est bien marqu√©e comme r√©ussie apr√®s son ex√©cution.
    @Test
    void testAccomplirMission() {//
        mission.accomplirMission();
        assertTrue(mission.isMissionReussie(), "La mission devrait √™tre marqu√©e comme r√©ussie apr√®s accomplissement.");
    }

    //V√©rifie l‚Äôaffichage des informations avant et apr√®s l‚Äôaccomplissement.
    @Test
    void testAfficherInfos() {//
        String expectedAvant = "üìú Mission : Batman prot√®ge La Joconde | Succ√®s : ‚ùå";
        assertEquals(expectedAvant, mission.afficherInfos(), "Le d√©tail de la mission doit correspondre avant accomplissement.");

        mission.accomplirMission();

        String expectedApres = "üìú Mission : Batman prot√®ge La Joconde | Succ√®s : ‚úÖ";
        assertEquals(expectedApres, mission.afficherInfos(), "Le d√©tail de la mission doit correspondre apr√®s accomplissement.");
    }
}
